package email

import (
	"bytes"
	"fmt"
	"html/template"
	"net/smtp"

	"agent-stack/internal/models"
	"agent-stack/shared/config"
)

type Sender struct {
	config *config.EmailConfig
}

func NewSender(cfg *config.EmailConfig) *Sender {
	return &Sender{
		config: cfg,
	}
}

func (s *Sender) SendReport(report *models.EmailReport) error {
	if report == nil {
		return fmt.Errorf("report cannot be nil")
	}
	
	if len(report.Videos) == 0 {
		return nil // No videos to report
	}

	subject := fmt.Sprintf("YouTube Video Digest - %d Videos Worth Watching (%s)",
		report.Selected, report.Date.Format("Jan 2, 2006"))

	body, err := s.generateEmailBody(report)
	if err != nil {
		return fmt.Errorf("failed to generate email body: %w", err)
	}

	if err := s.sendViaSMTP(subject, body); err != nil {
		return fmt.Errorf("failed to send email: %w", err)
	}
	
	return nil
}

func (s *Sender) sendViaSMTP(subject, body string) error {
	auth := smtp.PlainAuth("", s.config.Username, s.config.Password, s.config.SMTPServer)

	to := []string{s.config.ToEmail}
	msg := []byte(fmt.Sprintf(`To: %s
From: %s
Subject: %s
MIME-Version: 1.0
Content-Type: text/html; charset=UTF-8

%s`, s.config.ToEmail, s.config.FromEmail, subject, body))

	addr := fmt.Sprintf("%s:%d", s.config.SMTPServer, s.config.SMTPPort)
	return smtp.SendMail(addr, auth, s.config.FromEmail, to, msg)
}

func (s *Sender) generateEmailBody(report *models.EmailReport) (string, error) {
	tmplStr := `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>YouTube Video Digest</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px; }
        .header { background-color: #ff0000; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .summary { background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px; }
        .video { border: 1px solid #ddd; border-radius: 8px; margin-bottom: 20px; overflow: hidden; }
        .video-header { background-color: #f1f3f4; padding: 15px; }
        .video-title { font-size: 18px; font-weight: bold; margin-bottom: 5px; }
        .video-channel { color: #666; font-size: 14px; }
        .video-content { padding: 15px; }
        .score { float: right; background-color: #4CAF50; color: white; padding: 5px 10px; border-radius: 15px; font-weight: bold; }
        .summary-text { margin-bottom: 10px; }
        .value-prop { background-color: #e8f5e8; padding: 10px; border-left: 4px solid #4CAF50; margin: 10px 0; }
        .reasoning { color: #666; font-style: italic; margin-top: 10px; }
        .video-link { display: inline-block; background-color: #ff0000; color: white; padding: 10px 15px; text-decoration: none; border-radius: 5px; margin-top: 10px; }
        .video-link:hover { background-color: #cc0000; }
        .footer { text-align: center; color: #666; font-size: 12px; margin-top: 30px; border-top: 1px solid #ddd; padding-top: 15px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üé• YouTube Video Digest</h1>
        <p>{{.Date.Format "Monday, January 2, 2006"}}</p>
    </div>

    <div class="summary">
        <h2>Summary</h2>
        <p><strong>Videos Analyzed:</strong> {{.Total}}</p>
        <p><strong>Videos Selected:</strong> {{.Selected}}</p>
        <p><strong>Selection Rate:</strong> {{printf "%.1f" (div (mul (float64 .Selected) 100.0) (float64 .Total))}}%</p>
    </div>

    {{range .Videos}}
    <div class="video">
        <div class="video-header">
            <div class="video-title">
                {{.Video.Title}}
                <span class="score">{{.Score}}/10</span>
            </div>
            <div class="video-channel">{{.Video.ChannelTitle}} ‚Ä¢ {{.Video.PublishedAt.Format "Jan 2, 15:04"}} ‚Ä¢ {{.Video.Duration}}</div>
        </div>
        <div class="video-content">
            <div class="summary-text">{{.Summary}}</div>
            
            <div class="value-prop">
                <strong>üí° Why Watch:</strong> {{.ValueProp}}
            </div>
            
            <div class="reasoning">{{.Reasoning}}</div>
            
            <a href="{{.Video.URL}}" class="video-link">‚ñ∂Ô∏è Watch Video</a>
        </div>
    </div>
    {{end}}

    <div class="footer">
        <p>Generated by YouTube Curator Agent ‚Ä¢ Powered by Gemini AI</p>
        <p>This digest was automatically curated based on your technical preferences.</p>
        <p style="font-style: italic; color: #888; margin: 15px 0;">"Signal over noise instead of noise over signal"</p>
        <hr style="border: none; border-top: 1px solid #ddd; margin: 20px 0;">
        <p>Made with ‚ù§Ô∏è by <a href="https://eliottteissonniere.com" style="color: #ff0000; text-decoration: none;">Eliott Teissonniere</a></p>
        <p><a href="https://github.com/ETeissonniere/agent-stack" style="color: #ff0000; text-decoration: none;">‚≠ê Star us on GitHub</a></p>
    </div>
</body>
</html>
`

	tmpl := template.New("email").Funcs(template.FuncMap{
		"div": func(a, b float64) float64 { 
			if b == 0 { return 0 }
			return a / b 
		},
		"mul":     func(a, b float64) float64 { return a * b },
		"float64": func(i int) float64 { return float64(i) },
	})

	tmpl, err := tmpl.Parse(tmplStr)
	if err != nil {
		return "", err
	}

	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, report); err != nil {
		return "", err
	}

	return buf.String(), nil
}
